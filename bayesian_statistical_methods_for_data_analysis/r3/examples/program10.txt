  #=====Program 10（時変係数ARモデル） ==============================
  # 14:21 2010/03/01
  # データファイルが C ドライブのフォルダ RW にあるとする
  setwd("C:/RW")
  data <- read.table("e-IIP1.txt")
  # データ数 N を求める
  ND <- nrow(data)
  # オプションの設定-------------------------------------------------
  limy <- 1e4; MJ <- 10; NF <- 30; Mn <- 20
  IT <- 3; N <- trunc(ND/IT)
  NO <- ND - IT*N
  if (NO > 0)
    { 
     N <- N + 1
    }
  y <- numeric(N); NN <- 0
  for (i in 1:(N-1))
    {
     c <- 0
     for (j in 1:IT)
       {
        NN <- NN + 1; c <- c + data[NN,1]
       }
     y[i] <- c/IT
    }
  c <- 0
  for (j in 1:(ND-(N-1)*IT))
    {
     NN <- NN + 1; c <- c + data[NN,1]
    }
  y[N] <- c/(ND-(N-1)*IT)
  # 行列の設定 ------------------------------------------------------
  FGset <- function(q, k)
    {
     if (k == 1)
       {
        m <- q; F <- diag(m); G <- diag(m)
       }
     if (k == 2)
       {
        m <- 2*q
        F1 <- cbind(2*diag(q),-diag(q)); F2 <- cbind(diag(q),0*diag(q))
        F <- rbind(F1,F2); G <- rbind(diag(q),0*diag(q))
       } 
     return(list(m=m, MatF=F, MatG=G))
    }
  # AR係数から自己共分散関数を計算する ------------------------------
  AUTCOR <- function(al, SIG2, q, Mn)
    {
     n <- q + 1; M <- max(q,Mn) + 1; scv <- numeric(M)
     c <- numeric(n); A <- matrix(0,n,n); c[1] <- SIG2
     A[1,2:n] <- al; A[2,1:q] <- al; B <- diag(n)
     if (n > 2)
       {
        for (i in 3:n)
          {
           A[i,1:(n-i+1)] <- al[(i-1):q]
           for (j in 2:(i-1))
             {
              B[i,j] <- -al[i-j]
             }
          }
       }
     B <- B - A
     scv[1:n] <- solve(B,c)
     if (Mn > q)
       {
        for (j in 1:(Mn-q))
          {
           a <- 0
           for (i in 1:q)
             {
              a <- a + scv[n+j-i]*al[i]
             }
           scv[n+j] <- a
          }
       }
     return(scv)
    }
  # AR係数からPARCORを計算する --------------------------------------
  PARCOR <- function(al, q)
    {
     if (q == 1)
       {
        par <- al
       }
     else
       {
        par <- al; g <- numeric(50)
        for (ii in 1:(q-1))
          {
           II <- q - ii; s <- 1 - par[II+1]^2
           for (I in 1:II)
             {
              g[I] <- (par[I] + par[II+1]*par[II-I+1])/s
             }
           I2 <- (II + 1)/2; MII <- II - 2*trunc(II/2)
           if (MII == 1)
             {
              g[I2] <- par[I2]/(1 - par[II+1])
             }
           for (I in 1:II)
             {
              par[I] <- g[I]
             }
          }
       } 
     return(par)
    }
  # 離散フーリエ変換（Goertzel法）-----------------------------------
  FOURIE <- function(x, N, NF)
    {
     FC <- numeric(NF); FS <- numeric(NF); W <- pi/(NF-1)
     for (i in 1:NF)
       {
        CI <- cos((i-1)*W); SI <- sin((i-1)*W); T1 <- 0; T2 <- 0
        for (j in 2:N)
          {
           jj <- N - j + 2; T0 <- 2*CI*T1 - T2 + x[jj]
           T2 <- T1; T1 <- T0
          }
        FC[i] <- CI*T1 - T2 + x[1]; FS[i] <- SI*T1
       }
     return(list(FC=FC, FS=FS))
    }
  # ARモデルのスペクトル --------------------------------------------
  ARSP <- function(TAU2, al, q, NF)
    {
     h <- numeric(50); h[1] <- 1
     for (i in 1:q)
       {
        h[i+1] <- -al[i]
       }
     Fal <- FOURIE(h, q+1, NF); FR <- Fal$FC
     FI <- Fal$FS; SP <- TAU2/(FR^2 + FI^2); LSP <- log(SP)
     return(LSP)
    }
  # カルマンフィルタの関数 ------------------------------------------
  KF1 <- function(y, XF0, VF0, F, G, Q, R, limy, ISW, OSW, m, q, N)
    {
     if (OSW == 1)
       {
        XPS <- matrix(0, m, N); XFS <- matrix(0, m, N)
        VPS <- array(dim = c(m, m, N)); VFS <- array(dim = c(m, m, N))
       }
     XF <- XF0; VF <- VF0; NSUM <- 0; SIG2 <- 0; LDET <- 0
     for (n in 1:N)
       {
        # 1期先予測
        XP <- F %*% XF
        VP <- F %*% VF %*% t(F) +  G %*% Q %*% t(G)
        # フィルタ
        if (y[n] < limy) 
          {
           H <- matrix(0, 1, m)
           for (i in 1:q)
             {
              n0 <- n - i
              if (n0 > 0)
                {
                 if (y[n0] < limy)
                   {
                    H[1,i] <- y[n0]
                   }
                }
             }
           NSUM <- NSUM + 1
           B <- H %*% VP %*% t(H) + R
           B1 <- solve(B)
           K <- VP %*% t(H) %*% B1
           e <- y[n] - H %*% XP
           XF <- XP + K %*% e
           VF <- VP - K %*% H %*% VP
           SIG2 <- SIG2 + t(e) %*% B1 %*% e
           LDET <- LDET + log(det(B))
          }
        else
          {
           XF <- XP; VF <- VP
          }
        if (OSW == 1)
          {
           XPS[,n] <- XP; XFS[,n] <- XF
           VPS[,,n] <- VP; VFS[,,n] <- VF
          }   
       }
     SIG2 <- SIG2 / NSUM
     if (ISW == 0)
       {
        FF <- -0.5 * (NSUM * (log(2 * pi * SIG2) + 1) + LDET)
       }
     else
       {
        FF <- -0.5 * (NSUM * (log(2 * pi) + SIG2) + LDET)
       }
     if (OSW == 0)
       {
        return(list(LLF=FF, Ovar=SIG2))
       }
     if (OSW == 1)
       {
        return(list(XPS=XPS, XFS=XFS, VPS=VPS, VFS=VFS, Ovar=SIG2))
       }
    }
  # 平滑化の関数 ----------------------------------------------------
  SMO1 <- function(XPS, XFS, VPS, VFS, F, GSIG2, m, q, N)
    {
     XSS <- matrix(0, m, N); VSS <- array(dim = c(m, m, N))
     XS1 <- XFS[,N]; VS1 <- VFS[,,N]
     XSS[,N] <- XS1; VSS[,,N] <- VS1
     for (n1 in 1:(N-1))
       {
        n <- N - n1; XP <- XPS[,n+1]; XF <- XFS[,n]
        VP <- VPS[,,n+1]; VF <- VFS[,,n]; VPI <- solve(VP)
        A <- VF %*% t(F) %*% VPI
        XS2 <- XF + A %*% (XS1 - XP)
        VS2 <- VF + A %*% (VS1 - VP) %*% t(A)
        XS1 <- XS2; VS1 <- VS2
        XSS[,n] <- XS1; VSS[,,n] <- VS1
       }
    arc <- matrix(0, q, N); arv <- array(dim = c(q, q, N))
    for (n in 1:N)
      {
       arc[,n] <- XSS[1:q,n]; arv[,,n] <- GSIG2 * VSS[1:q,1:q,n]
      }
    return(list(arc=arc, arv=arv))
   }
  # TAU2の対数尤度関数の定義 ----------------------------------------
  LogL <- function(theta, y, limy, q, k, N)  
    {
     TAU2 <- theta
     MAT <- FGset(q, k)
     m <- MAT$m; F <- MAT$MatF; G <- MAT$MatG
     OSW <- 0; ISW <- 0; Q <- TAU2*diag(q); R <- diag(1)
     XF0 <- numeric(m); VF0 <- 150 * diag(m)
     LL <- KF1(y, XF0, VF0, F, G, Q, R, limy, ISW, OSW, m, q, N)
     LL0 <- LL$LLF
     return(LL0)      
    }
  STAU2 <- matrix(0,2,MJ); SLL <- matrix(0,2,MJ); MLL <- -1e10
  for (I in 1:2)
    {
     k <- I
     for (J in 1:MJ)
       {
        q <- J
        LLF1 <- optimize(LogL, lower=1e-6, upper=1e2, maximum=TRUE, 
                         y=y, limy=limy, q=q, k=k, N=N)
        TAU2 <- LLF1$maximum; LL <- LLF1$objective
        STAU2[I,J] <- TAU2; SLL[I,J] <- LL
        if (LL > MLL)
          {
           MLL <- LL; Mq <- q; Mk <- k
          }
       }
    }
  q <- Mq; k <- Mk; TAU2 <- STAU2[k,q]
  MAT <- FGset(q, k)
  m <- MAT$m; F <- MAT$MatF; G <- MAT$MatG
  OSW <- 1; ISW <- 0; Q <- TAU2*diag(q); R <- diag(1)
  XF0 <- numeric(m); VF0 <- 150 * diag(m)
  LLF2 <- KF1(y, XF0, VF0, F, G, Q, R, limy, ISW, OSW, m, q, N)
  XPS <- LLF2$XPS; XFS <- LLF2$XFS
  VPS <- LLF2$VPS; VFS <- LLF2$VFS
  SIG2 <- LLF2$Ovar; GSIG2 <- 1
  XVS <- SMO1(XPS, XFS, VPS, VFS, F, GSIG2, m, q, N)
  arc <- XVS$arc
  print(SLL)
  print(STAU2)
  print(k)
  print(q)
  # 時変PARCORの計算 ------------------------------------------------
  PAR <- matrix(0, q, N)
  for (n in 1:N)
    {
     al <- arc[,n]
     PAR[,n] <- PARCOR(al, q)
    }
  # 時変PARCORのグラフ作成 ------------------------------------------
  t <- c(1:N); xt <- PAR[1,]
  par(mfrow = c(1,3), oma=c(0,0,0,0) + 0.1, mar = c(4,4,2,2) + 0.1)
  plot(t, xt, xlim=range(t), ylim=c(-1,1), type="l", main="(a)", 
       xlab="time", ylab="PARCOR", lwd=2)
  xt <- PAR[2,]
  plot(t, xt, xlim=range(t), ylim=c(-1,1), type="l", main="(b)", 
       xlab="time", ylab="PARCOR", lwd=2)
  xt <- PAR[3,]
  plot(t, xt, xlim=range(t), ylim=c(-1,1), type="l", main="(c)", 
       xlab="time", ylab="PARCOR", lwd=2)
  # 時変スペクトルの計算 --------------------------------------------
  N1 <- N/6; TVSP <- matrix(0, NF, N1)
  for (n1 in 1:N1)
    {
     n <- 6 * n1; al <- arc[,n]
     TVSP[,n1] <- ARSP(SIG2, al, q, NF)
    }
  # 時変スペクトルのグラフ作成 --------------------------------------
  t <- 6*c(1:N1); fr <- 0.5*c(1:NF)/NF
  par(mfrow = c(1,2), oma=c(0,0,0,0) + 0.1, mar = c(4,4,2,2) + 0.1)
  library(lattice); z <- TVSP
  persp(fr,t,z,theta=45,phi=30,xlab="frequency", 
        ylab="time", zlab="log p(f)",main="(a)")
  contour(fr,t,z,main="(b)",xlab="frequency",ylab="time")
  # 時変自己共分散関数の計算 ----------------------------------------
  N1 <- N/6; M <- max(q,Mn) + 1; AUC <- matrix(0, M, N1)
  for (n1 in 1:N1)
    {
     n <- 6*n1; al <- arc[,n]
     AUC[,n1] <- AUTCOR(al, SIG2, q, Mn)
    }
  # 時変自己共分散関数のグラフ作成 ----------------------------------
  library(lattice)
  par(mfrow = c(1,2), oma=c(0,0,0,0) + 0.1, mar = c(4,4,3,2) + 0.1)
  t <- 6*c(1:N1); L <- c(1:M); z <- AUC
  persp(L,t,z,theta=45,phi=30,xlim=range(L), ylim=range(t),
        zlim=range(z), xlab="Lag", ylab="time", zlab="C",main="(a)")
  contour(L,t,z,main="(b)",xlab="lag",ylab="time")
  #==================================================================
